// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Like {
    userId String
    postId Int
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
    @@index([userId])
    @@index([postId])
}

model Post {
    id           Int      @id @default(autoincrement())
    content      String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    createdBy    User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    likes        Like[]
    comments     Post[]   @relation(name: "Comments")
    parentPost   Post?    @relation(name: "Comments", fields: [parentPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    parentPostId Int?

    @@index([createdById])
    @@index([id])
    @@index([parentPostId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    posts         Post[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Non-Next Auth
    followers User[] @relation(name: "Followers")
    follows   User[] @relation(name: "Followers")
    likes     Like[]
}
